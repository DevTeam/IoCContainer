<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IoC</name>
    </assembly>
    <members>
        <member name="T:IoC.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:IoC.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:IoC.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:IoC.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:IoC.ImplicitNotNullAttribute">
            <summary>
            Implicitly apply [NotNull]/[ItemNotNull] annotation to all the of type members and parameters
            in particular scope where this annotation is used (type declaration or whole assembly).
            </summary>
        </member>
        <member name="T:IoC.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:IoC.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:IoC.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:IoC.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:IoC.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:IoC.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:IoC.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:IoC.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:IoC.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:IoC.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:IoC.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:IoC.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:IoC.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:IoC.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:IoC.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:IoC.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:IoC.MeansImplicitUseAttribute"/> or <see cref="T:IoC.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:IoC.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:IoC.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:IoC.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:IoC.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:IoC.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:IoC.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:IoC.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:IoC.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:IoC.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:IoC.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:IoC.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:IoC.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:IoC.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:IoC.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:IoC.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:IoC.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:IoC.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:IoC.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:IoC.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:IoC.SourceTemplateAttribute">source template</see> if the
            <see cref="T:IoC.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:IoC.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:IoC.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:IoC.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:IoC.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:IoC.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:IoC.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:IoC.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:IoC.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:IoC.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:IoC.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:IoC.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:IoC.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:IoC.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:IoC.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:IoC.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:IoC.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:IoC.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:IoC.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:IoC.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:IoC.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:IoC.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:IoC.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:IoC.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:IoC.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:IoC.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:IoC.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:IoC.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:IoC.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:IoC.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:IoC.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:IoC.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerables.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:IoC.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:IoC.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:IoC.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:IoC.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:IoC.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:IoC.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:IoC.AutowiringStrategies">
            <summary>
            Provides autowiring strategies.
            </summary>
        </member>
        <member name="M:IoC.AutowiringStrategies.AspectOriented">
            <summary>
            Create an aspect oriented autowiring strategy.
            </summary>
            <returns>The instance of aspect oriented autowiring strategy.</returns>
        </member>
        <member name="M:IoC.AutowiringStrategies.Type``1(IoC.IAutowiringStrategy,System.Func{``0,System.Type})">
            <summary>
            Specify a type selector for an aspect oriented autowiring strategy.
            </summary>
            <typeparam name="TTypeAttribute">The type metadata attribute.</typeparam>
            <param name="strategy">The base aspect oriented autowiring strategy.</param>
            <param name="typeSelector">The type selector.</param>
            <returns>The instance of aspect oriented autowiring strategy.</returns>
        </member>
        <member name="M:IoC.AutowiringStrategies.Order``1(IoC.IAutowiringStrategy,System.Func{``0,System.IComparable})">
            <summary>
            Specify an order selector for an aspect oriented autowiring strategy.
            </summary>
            <typeparam name="TOrderAttribute">The order metadata attribute.</typeparam>
            <param name="strategy">The base aspect oriented autowiring strategy.</param>
            <param name="orderSelector">The type selector.</param>
            <returns>The instance of aspect oriented autowiring strategy.</returns>
        </member>
        <member name="M:IoC.AutowiringStrategies.Tag``1(IoC.IAutowiringStrategy,System.Func{``0,System.Object})">
            <summary>
            Specify a tag selector for an aspect oriented autowiring strategy.
            </summary>
            <typeparam name="TTagAttribute">The tag metadata attribute.</typeparam>
            <param name="strategy">The base aspect oriented autowiring strategy.</param>
            <param name="tagSelector">The tag selector.</param>
            <returns>The instance of aspect oriented autowiring strategy.</returns>
        </member>
        <member name="T:IoC.Container">
            <summary>
            The base IoC container implementation.
            </summary>
        </member>
        <member name="M:IoC.Container.Create(IoC.IConfiguration[])">
            <summary>
            Creates a root container with default features.
            </summary>
            <param name="configurations"></param>
            <returns>The root container.</returns>
        </member>
        <member name="M:IoC.Container.Create(System.String,IoC.IConfiguration[])">
            <summary>
            Creates a root container with default features.
            </summary>
            <param name="name">The optional name of the container.</param>
            <param name="configurations"></param>
            <returns>The root container.</returns>
        </member>
        <member name="P:IoC.Container.Parent">
            <inheritdoc />
        </member>
        <member name="M:IoC.Container.ToString">
            <inheritdoc />
        </member>
        <member name="M:IoC.Container.TryRegisterDependency(System.Collections.Generic.IEnumerable{IoC.Key},IoC.IDependency,IoC.ILifetime,IoC.IToken@)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Container.TryGetResolver``1(System.Type,System.Object,IoC.Resolver{``0}@,System.Exception@,IoC.IContainer)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Container.TryGetDependency(IoC.Key,IoC.IDependency@,IoC.ILifetime@)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Container.Dispose">
            <inheritdoc />
        </member>
        <member name="M:IoC.Container.RegisterResource(System.IDisposable)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Container.UnregisterResource(System.IDisposable)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Container.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:IoC.Container.Subscribe(System.IObserver{IoC.ContainerEvent})">
            <inheritdoc />
        </member>
        <member name="T:IoC.ContainerEvent">
            <summary>
            Provides information about changes in the container.
            </summary>
        </member>
        <member name="F:IoC.ContainerEvent.Container">
            <summary>
            The target container.
            </summary>
        </member>
        <member name="F:IoC.ContainerEvent.EventType">
            <summary>
            The type of event.
            </summary>
        </member>
        <member name="F:IoC.ContainerEvent.IsSuccess">
            <summary>
            True if it is success.
            </summary>
        </member>
        <member name="F:IoC.ContainerEvent.Error">
            <summary>
            Error during operation.
            </summary>
        </member>
        <member name="F:IoC.ContainerEvent.Keys">
            <summary>
            The changed keys.
            </summary>
        </member>
        <member name="F:IoC.ContainerEvent.Dependency">
            <summary>
            Related dependency.
            </summary>
        </member>
        <member name="F:IoC.ContainerEvent.Lifetime">
            <summary>
            Related lifetime.
            </summary>
        </member>
        <member name="F:IoC.ContainerEvent.ResolverExpression">
            <summary>
            Related lifetime.
            </summary>
        </member>
        <member name="T:IoC.Context`1">
            <summary>
            Represents the initializing context.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:IoC.Context`1.It">
            <summary>
            The resolved instance.
            </summary>
        </member>
        <member name="T:IoC.Context">
            <summary>
            Represents the resolving context.
            </summary>
        </member>
        <member name="F:IoC.Context.Key">
            <summary>
            The resolving key.
            </summary>
        </member>
        <member name="F:IoC.Context.Container">
            <summary>
            The resolving container.
            </summary>
        </member>
        <member name="F:IoC.Context.Args">
            <summary>
            The optional resolving arguments.
            </summary>
        </member>
        <member name="M:IoC.Core.AspectOrientedAutowiringStrategy.TryResolveType(System.Type,System.Type,System.Type@)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Core.AspectOrientedAutowiringStrategy.TryResolveConstructor(System.Collections.Generic.IEnumerable{IoC.IMethod{System.Reflection.ConstructorInfo}},IoC.IMethod{System.Reflection.ConstructorInfo}@)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Core.AspectOrientedAutowiringStrategy.TryResolveInitializers(System.Collections.Generic.IEnumerable{IoC.IMethod{System.Reflection.MethodInfo}},System.Collections.Generic.IEnumerable{IoC.IMethod{System.Reflection.MethodInfo}}@)">
            <inheritdoc />
        </member>
        <member name="T:IoC.Core.AspectOrientedMetadata">
            <summary>
            Metadata for aspect oriented autowiring strategy.
            </summary>
        </member>
        <member name="M:IoC.Core.AspectOrientedMetadata.TryResolveType(System.Type,System.Type,System.Type@)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Core.AspectOrientedMetadata.TryResolveConstructor(System.Collections.Generic.IEnumerable{IoC.IMethod{System.Reflection.ConstructorInfo}},IoC.IMethod{System.Reflection.ConstructorInfo}@)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Core.AspectOrientedMetadata.TryResolveInitializers(System.Collections.Generic.IEnumerable{IoC.IMethod{System.Reflection.MethodInfo}},System.Collections.Generic.IEnumerable{IoC.IMethod{System.Reflection.MethodInfo}}@)">
            <inheritdoc />
        </member>
        <member name="T:IoC.Core.BuildContext">
            <summary>
            Represents build context.
            </summary>
        </member>
        <member name="T:IoC.Core.FluentRegister">
            <summary>
            Represents extensions to register a dependency in the container.
            </summary>
            <summary>
            Represents extensions to add bindings to the container.
            </summary>
        </member>
        <member name="M:IoC.Core.FluentRegister.Register``1(IoC.IMutableContainer,IoC.ILifetime,System.Object[])">
            <summary>
            Registers a binding.
            </summary>
            <typeparam name="T">The autowiring type.</typeparam>
            <param name="container">The target container.</param>
            <param name="lifetime">The target lifetime.</param>
            <param name="tags">The tags.</param>
            <returns>The registration token.</returns>
        </member>
        <member name="M:IoC.Core.FluentRegister.Register``1(IoC.IMutableContainer,System.Linq.Expressions.Expression{System.Func{IoC.Context,``0}},IoC.ILifetime,System.Object[],System.Linq.Expressions.Expression{System.Action{IoC.Context{``0}}}[])">
            <summary>
            Registers a binding.
            </summary>
            <typeparam name="T">The base type.</typeparam>
            <param name="container">The target container.</param>
            <param name="factory">The expression to create an instance.</param>
            <param name="lifetime">The target lifetime.</param>
            <param name="tags">The tags.</param>
            <param name="statements">The set of expressions to initialize an instance.</param>
            <returns>The registration token.</returns>
        </member>
        <member name="M:IoC.Core.FluentRegister.Register(IoC.IMutableContainer,System.Collections.Generic.IEnumerable{System.Type},IoC.IDependency,IoC.ILifetime,System.Object[])">
            <summary>
            Registers a binding.
            </summary>
            <param name="container">The target container.</param>
            <param name="types">The set of types.</param>
            <param name="dependency">The dependency.</param>
            <param name="lifetime">The target lifetime.</param>
            <param name="tags">The tags.</param>
            <returns>The registration token.</returns>
        </member>
        <member name="M:IoC.Core.FluentRegister.Register``2(IoC.IMutableContainer,IoC.ILifetime,System.Object[])">
            <summary>
            Registers a binding.
            </summary>
            <typeparam name="T">The autowiring type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <param name="container">The target container.</param>
            <param name="lifetime">The target lifetime.</param>
            <param name="tags">The tags.</param>
            <returns>The registration token.</returns>
        </member>
        <member name="M:IoC.Core.FluentRegister.Register``2(IoC.IMutableContainer,System.Linq.Expressions.Expression{System.Func{IoC.Context,``0}},IoC.ILifetime,System.Object[],System.Linq.Expressions.Expression{System.Action{IoC.Context{``0}}}[])">
            <summary>
            Registers a binding.
            </summary>
            <typeparam name="T">The base type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <param name="container">The target container.</param>
            <param name="factory">The expression to create an instance.</param>
            <param name="lifetime">The target lifetime.</param>
            <param name="tags">The tags.</param>
            <param name="statements">The set of expressions to initialize an instance.</param>
            <returns>The dependency token.</returns>
        </member>
        <member name="M:IoC.Core.FluentRegister.Register``3(IoC.IMutableContainer,IoC.ILifetime,System.Object[])">
            <summary>
            Registers a binding.
            </summary>
            <typeparam name="T">The autowiring type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <param name="container">The target container.</param>
            <param name="lifetime">The target lifetime.</param>
            <param name="tags">The tags.</param>
            <returns>The registration token.</returns>
        </member>
        <member name="M:IoC.Core.FluentRegister.Register``3(IoC.IMutableContainer,System.Linq.Expressions.Expression{System.Func{IoC.Context,``0}},IoC.ILifetime,System.Object[],System.Linq.Expressions.Expression{System.Action{IoC.Context{``0}}}[])">
            <summary>
            Registers a binding.
            </summary>
            <typeparam name="T">The base type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <param name="container">The target container.</param>
            <param name="factory">The expression to create an instance.</param>
            <param name="lifetime">The target lifetime.</param>
            <param name="tags">The tags.</param>
            <param name="statements">The set of expressions to initialize an instance.</param>
            <returns>The dependency token.</returns>
        </member>
        <member name="M:IoC.Core.FluentRegister.Register``4(IoC.IMutableContainer,IoC.ILifetime,System.Object[])">
            <summary>
            Registers a binding.
            </summary>
            <typeparam name="T">The autowiring type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <param name="container">The target container.</param>
            <param name="lifetime">The target lifetime.</param>
            <param name="tags">The tags.</param>
            <returns>The registration token.</returns>
        </member>
        <member name="M:IoC.Core.FluentRegister.Register``4(IoC.IMutableContainer,System.Linq.Expressions.Expression{System.Func{IoC.Context,``0}},IoC.ILifetime,System.Object[],System.Linq.Expressions.Expression{System.Action{IoC.Context{``0}}}[])">
            <summary>
            Registers a binding.
            </summary>
            <typeparam name="T">The base type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <param name="container">The target container.</param>
            <param name="factory">The expression to create an instance.</param>
            <param name="lifetime">The target lifetime.</param>
            <param name="tags">The tags.</param>
            <param name="statements">The set of expressions to initialize an instance.</param>
            <returns>The dependency token.</returns>
        </member>
        <member name="T:IoC.Core.IArray">
            <summary>
            Marker interface for arrays.
            </summary>
        </member>
        <member name="T:IoC.Core.IExpressionBuilder`1">
            <summary>
            Allows to build expression for lifetimes.
            </summary>
        </member>
        <member name="M:IoC.Core.IExpressionBuilder`1.Build(System.Linq.Expressions.Expression,IoC.IBuildContext,`0)">
            <summary>
            Builds the expression.
            </summary>
            <param name="bodyExpression">The expression body to get an instance.</param>
            <param name="buildContext">The build context.</param>
            <param name="context">The expression build context.</param>
            <returns>The new expression.</returns>
        </member>
        <member name="F:IoC.Core.Registration.ContainerParameter">
            <summary>
            The container parameter.
            </summary>
        </member>
        <member name="F:IoC.Core.Registration.ArgsParameter">
            <summary>
            The args parameters.
            </summary>
        </member>
        <member name="F:IoC.Core.Registration.ResolverParameters">
            <summary>
            All resolvers parameters.
            </summary>
        </member>
        <member name="T:IoC.Dependencies.AutowiringDependency">
            <summary>
            Represents the autowiring dependency.
            </summary>
        </member>
        <member name="M:IoC.Dependencies.AutowiringDependency.#ctor(System.Type,System.Linq.Expressions.LambdaExpression[])">
            <summary>
            Creates an instance of dependency.
            </summary>
            <param name="implementationType">The autowiring implementation type.</param>
            <param name="initializeInstanceLambdaStatements">The statements to initialize an instance.</param>
        </member>
        <member name="M:IoC.Dependencies.AutowiringDependency.#ctor(System.Type,IoC.IAutowiringStrategy,System.Linq.Expressions.LambdaExpression[])">
            <summary>
            Creates an instance of dependency.
            </summary>
            <param name="implementationType">The autowiring implementation type.</param>
            <param name="autowiringStrategy">The autowiring strategy.</param>
            <param name="initializeInstanceLambdaStatements">The statements to initialize an instance.</param>
        </member>
        <member name="M:IoC.Dependencies.AutowiringDependency.TryBuildExpression(IoC.IBuildContext,IoC.ILifetime,System.Linq.Expressions.Expression@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Dependencies.AutowiringDependency.ToString">
            <inheritdoc />
        </member>
        <member name="T:IoC.Dependencies.ExpressionDependency">
            <summary>
            Represents the dependency based on expressions.
            </summary>
        </member>
        <member name="M:IoC.Dependencies.ExpressionDependency.#ctor(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression[])">
            <summary>
            Creates an instance of dependency.
            </summary>
            <param name="instanceExpression">The expression to create an instance.</param>
            <param name="initializeInstanceExpressions">The statements to initialize an instance.</param>
        </member>
        <member name="M:IoC.Dependencies.ExpressionDependency.#ctor(System.Linq.Expressions.LambdaExpression,IoC.IAutowiringStrategy,System.Linq.Expressions.LambdaExpression[])">
            <summary>
            Creates an instance of dependency.
            </summary>
            <param name="instanceExpression">The expression to create an instance.</param>
            <param name="autowiringStrategy">The autowiring strategy.</param>
            <param name="initializeInstanceExpressions">The statements to initialize an instance.</param>
        </member>
        <member name="M:IoC.Dependencies.ExpressionDependency.TryBuildExpression(IoC.IBuildContext,IoC.ILifetime,System.Linq.Expressions.Expression@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Dependencies.ExpressionDependency.ToString">
            <inheritdoc />
        </member>
        <member name="T:IoC.Dependencies.TypesMapDependency">
            <summary>
            Represents the dependency based on expressions and a map of types.
            </summary>
        </member>
        <member name="M:IoC.Dependencies.TypesMapDependency.#ctor(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IDictionary{System.Type,System.Type},IoC.IAutowiringStrategy)">
            <summary>
            Creates an instance of dependency.
            </summary>
            <param name="instanceExpression">The expression to create an instance.</param>
            <param name="initializeInstanceExpressions">The statements to initialize an instance.</param>
            <param name="typesMap">The type mapping dictionary.</param>
            <param name="autowiringStrategy">The autowiring strategy.</param>
        </member>
        <member name="M:IoC.Dependencies.TypesMapDependency.TryBuildExpression(IoC.IBuildContext,IoC.ILifetime,System.Linq.Expressions.Expression@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Dependencies.TypesMapDependency.ToString">
            <inheritdoc />
        </member>
        <member name="T:IoC.EventType">
            <summary>
            Container event types.
            </summary>
        </member>
        <member name="F:IoC.EventType.CreateContainer">
            <summary>
            On container creation.
            </summary>
        </member>
        <member name="F:IoC.EventType.DisposeContainer">
            <summary>
            On container disposing.
            </summary>
        </member>
        <member name="F:IoC.EventType.RegisterDependency">
            <summary>
            On dependency registration.
            </summary>
        </member>
        <member name="F:IoC.EventType.ContainerStateSingletonLifetime">
            <summary>
            On dependency unregistration.
            </summary>
        </member>
        <member name="F:IoC.EventType.ResolverCompilation">
            <summary>
            On resolver compilation.
            </summary>
        </member>
        <member name="T:IoC.Features.CollectionFeature">
            <summary>
            Allows to resolve enumeration of all instances related to corresponding bindings.
            </summary>
        </member>
        <member name="F:IoC.Features.CollectionFeature.Set">
            The default instance.
        </member>
        <member name="M:IoC.Features.CollectionFeature.Apply(IoC.IMutableContainer)">
            <inheritdoc />
        </member>
        <member name="T:IoC.Features.CommonTypesFeature">
            <summary>
            Allows to resolve common types like a <c>Lazy</c>.
            </summary>
        </member>
        <member name="F:IoC.Features.CommonTypesFeature.Set">
            The default instance.
        </member>
        <member name="M:IoC.Features.CommonTypesFeature.Apply(IoC.IMutableContainer)">
            <inheritdoc />
        </member>
        <member name="T:IoC.Features.CoreFeature">
            <summary>
            Adds the set of core features like lifetimes and containers.
            </summary>
        </member>
        <member name="F:IoC.Features.CoreFeature.Set">
            The default instance.
        </member>
        <member name="M:IoC.Features.CoreFeature.Apply(IoC.IMutableContainer)">
            <inheritdoc />
        </member>
        <member name="T:IoC.Features.DefaultFeature">
            <summary>
            Adds a set of all bundled features.
            </summary>
        </member>
        <member name="F:IoC.Features.DefaultFeature.Set">
            The default instance.
        </member>
        <member name="M:IoC.Features.DefaultFeature.Apply(IoC.IMutableContainer)">
            <inheritdoc />
        </member>
        <member name="T:IoC.Features.FuncFeature">
            <summary>
            Allows to resolve Functions.
            </summary>
        </member>
        <member name="F:IoC.Features.FuncFeature.Set">
            The default instance.
        </member>
        <member name="F:IoC.Features.FuncFeature.LightSet">
            The high-performance instance.
        </member>
        <member name="M:IoC.Features.FuncFeature.Apply(IoC.IMutableContainer)">
            <inheritdoc />
        </member>
        <member name="T:IoC.Features.LightFeature">
            <summary>
            Adds a set of all bundled features.
            </summary>
        </member>
        <member name="F:IoC.Features.LightFeature.Set">
            The default instance.
        </member>
        <member name="M:IoC.Features.LightFeature.Apply(IoC.IMutableContainer)">
            <inheritdoc />
        </member>
        <member name="T:IoC.Features.ResolveUnboundFeature">
            <summary>
            Allows to resolve unbound dependencies.
            </summary>
        </member>
        <member name="M:IoC.Features.ResolveUnboundFeature.#ctor">
            <summary>
            Creates an instance of feature.
            </summary>
        </member>
        <member name="M:IoC.Features.ResolveUnboundFeature.#ctor(System.Boolean,IoC.IAutowiringStrategy)">
            <summary>
            Creates an instance of feature.
            </summary>
            <param name="supportDefaults"><c>True</c> to resolve default(T) for unresolved value types.</param>
            <param name="autowiringStrategy">The autowiring strategy.</param>
        </member>
        <member name="M:IoC.Features.ResolveUnboundFeature.Apply(IoC.IMutableContainer)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Features.ResolveUnboundFeature.Dispose">
            <inheritdoc />
        </member>
        <member name="M:IoC.Features.ResolveUnboundFeature.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:IoC.Features.TaskFeature">
            <summary>
            Allows to resolve Tasks.
            </summary>
        </member>
        <member name="F:IoC.Features.TaskFeature.Set">
            The default instance.
        </member>
        <member name="F:IoC.Features.TaskFeature.Tag">
            <summary>
            TaskFeature default tag
            </summary>
        </member>
        <member name="M:IoC.Features.TaskFeature.Apply(IoC.IMutableContainer)">
            <inheritdoc />
        </member>
        <member name="T:IoC.Features.TupleFeature">
            <summary>
            Allows to resolve Tuples.
            </summary>
        </member>
        <member name="F:IoC.Features.TupleFeature.Set">
            The default instance.
        </member>
        <member name="F:IoC.Features.TupleFeature.LightSet">
            The high-performance instance.
        </member>
        <member name="M:IoC.Features.TupleFeature.Apply(IoC.IMutableContainer)">
            <inheritdoc />
        </member>
        <member name="T:IoC.FluentBind">
            <summary>
            Represents extensions to add bindings to the container.
            </summary>
            <summary>
            Represents extensions to add bindings to the container.
            </summary>
        </member>
        <member name="M:IoC.FluentBind.IsBound(IoC.IContainer,System.Type,System.Object)">
            <summary>
            Determines if the container or any his parents have a binding.
            </summary>
            <param name="container">The target container.</param>
            <param name="type">The contract type.</param>
            <param name="tag">The tag value.</param>
            <returns><c>True</c> if the binding exists.</returns>
        </member>
        <member name="M:IoC.FluentBind.IsBound``1(IoC.IContainer,System.Object)">
            <summary>
            Determines if the container or any his parents have a binding.
            </summary>
            <typeparam name="T">The contract type.</typeparam>
            <param name="container">The target container.</param>
            <param name="tag">The tag value.</param>
            <returns><c>True</c> if the binding exists.</returns>
        </member>
        <member name="M:IoC.FluentBind.CanResolve(IoC.IContainer,System.Type,System.Object)">
            <summary>
            Determines if a related instance can be resolved.
            </summary>
            <param name="container">The target container.</param>
            <param name="type">The contract type.</param>
            <param name="tag">The tag value.</param>
            <returns><c>True</c> if the binding exists.</returns>
        </member>
        <member name="M:IoC.FluentBind.CanResolve``1(IoC.IContainer,System.Object)">
            <summary>
            Determines if a related instance can be resolved.
            </summary>
            <typeparam name="T">The contract type.</typeparam>
            <param name="container">The target container.</param>
            <param name="tag">The tag value.</param>
            <returns><c>True</c> if the binding exists.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind(IoC.IMutableContainer,System.Type[])">
            <summary>
            Binds types.
            </summary>
            <param name="container">The target container.</param>
            <param name="types">A set of contract types.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind(IoC.IToken,System.Type[])">
            <summary>
            Binds types.
            </summary>
            <param name="token">The container binding token.</param>
            <param name="types">A set of contract types.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``1(IoC.IMutableContainer)">
            <summary>
            Binds the type.
            </summary>
            <typeparam name="T">The contract type.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``1(IoC.IToken)">
            <summary>
            Binds the type.
            </summary>
            <typeparam name="T">The contract type.</typeparam>
            <param name="token">The container binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``1(IoC.IBinding)">
            <summary>
            Binds the type.
            </summary>
            <typeparam name="T">The contract type.</typeparam>
            <param name="binding"></param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.As``1(IoC.IBinding{``0},IoC.Lifetime)">
            <summary>
            Assigns well-known lifetime to the binding.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="binding"></param>
            <param name="lifetime"></param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Lifetime``1(IoC.IBinding{``0},IoC.ILifetime)">
            <summary>
            Assigns the lifetime to the binding.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="binding"></param>
            <param name="lifetime"></param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Autowiring``1(IoC.IBinding{``0},IoC.IAutowiringStrategy)">
            <summary>
            Assigns the autowiring strategy to the binding.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="binding"></param>
            <param name="autowiringStrategy"></param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Tag``1(IoC.IBinding{``0},System.Object)">
            <summary>
            Marks the binding by the tag. Is it possible to use multiple times.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="binding">The binding token.</param>
            <param name="tagValue">The tag value.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.AnyTag``1(IoC.IBinding{``0})">
            <summary>
            Marks the binding to be used for any tags.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="binding">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.To(IoC.IBinding{System.Object},System.Type,System.Linq.Expressions.Expression{System.Action{IoC.Context{System.Object}}}[])">
            <summary>
            Registers autowiring binding.
            </summary>
            <param name="binding">The binding token.</param>
            <param name="type">The instance type.</param>
            <param name="statements">The set of expressions to initialize an instance.</param>
            <returns>The dependency token.</returns>
        </member>
        <member name="M:IoC.FluentBind.To``1(IoC.IBinding{``0},System.Linq.Expressions.Expression{System.Action{IoC.Context{``0}}}[])">
            <summary>
            Registers autowiring binding.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="binding">The binding token.</param>
            <param name="statements">The set of expressions to initialize an instance.</param>
            <returns>The dependency token.</returns>
        </member>
        <member name="M:IoC.FluentBind.To``1(IoC.IBinding{``0},System.Linq.Expressions.Expression{System.Func{IoC.Context,``0}},System.Linq.Expressions.Expression{System.Action{IoC.Context{``0}}}[])">
            <summary>
            Registers autowiring binding.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="binding">The binding token.</param>
            <param name="factory">The expression to create an instance.</param>
            <param name="statements">The set of expressions to initialize an instance.</param>
            <returns>The dependency token.</returns>
        </member>
        <member name="M:IoC.FluentBind.To``1(IoC.IBinding{``0},IoC.IDependency)">
            <summary>
            Registers autowiring binding.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="binding">The binding token.</param>
            <param name="dependency">The dependency.</param>
            <returns>The dependency token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``2(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``2(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``2(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``3(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``3(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``3(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``4(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``4(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``4(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``5(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``5(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``5(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``6(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``6(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``6(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``7(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``7(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``7(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``8(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``8(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``8(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``9(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``9(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``9(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``10(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``10(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``10(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``11(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``11(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``11(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``12(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``12(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``12(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``13(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``13(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``13(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``14(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``14(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``14(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``15(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``15(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``15(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``16(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``16(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``16(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``17(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``17(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``17(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``18(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``18(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``18(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``19(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``19(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``19(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``20(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``20(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``20(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``21(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``21(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``21(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``22(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``22(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``22(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``23(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``23(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``23(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``24(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``24(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``24(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``25(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``25(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``25(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``26(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``26(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``26(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``27(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``27(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``27(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``28(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <typeparam name="T27">The contract type #27.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``28(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <typeparam name="T27">The contract type #27.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``28(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <typeparam name="T27">The contract type #27.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``29(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <typeparam name="T27">The contract type #27.</typeparam>
            <typeparam name="T28">The contract type #28.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``29(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <typeparam name="T27">The contract type #27.</typeparam>
            <typeparam name="T28">The contract type #28.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``29(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <typeparam name="T27">The contract type #27.</typeparam>
            <typeparam name="T28">The contract type #28.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``30(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <typeparam name="T27">The contract type #27.</typeparam>
            <typeparam name="T28">The contract type #28.</typeparam>
            <typeparam name="T29">The contract type #29.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``30(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <typeparam name="T27">The contract type #27.</typeparam>
            <typeparam name="T28">The contract type #28.</typeparam>
            <typeparam name="T29">The contract type #29.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``30(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <typeparam name="T27">The contract type #27.</typeparam>
            <typeparam name="T28">The contract type #28.</typeparam>
            <typeparam name="T29">The contract type #29.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``31(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <typeparam name="T27">The contract type #27.</typeparam>
            <typeparam name="T28">The contract type #28.</typeparam>
            <typeparam name="T29">The contract type #29.</typeparam>
            <typeparam name="T30">The contract type #30.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``31(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <typeparam name="T27">The contract type #27.</typeparam>
            <typeparam name="T28">The contract type #28.</typeparam>
            <typeparam name="T29">The contract type #29.</typeparam>
            <typeparam name="T30">The contract type #30.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``31(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <typeparam name="T27">The contract type #27.</typeparam>
            <typeparam name="T28">The contract type #28.</typeparam>
            <typeparam name="T29">The contract type #29.</typeparam>
            <typeparam name="T30">The contract type #30.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``32(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <typeparam name="T27">The contract type #27.</typeparam>
            <typeparam name="T28">The contract type #28.</typeparam>
            <typeparam name="T29">The contract type #29.</typeparam>
            <typeparam name="T30">The contract type #30.</typeparam>
            <typeparam name="T31">The contract type #31.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``32(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <typeparam name="T27">The contract type #27.</typeparam>
            <typeparam name="T28">The contract type #28.</typeparam>
            <typeparam name="T29">The contract type #29.</typeparam>
            <typeparam name="T30">The contract type #30.</typeparam>
            <typeparam name="T31">The contract type #31.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``32(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <typeparam name="T27">The contract type #27.</typeparam>
            <typeparam name="T28">The contract type #28.</typeparam>
            <typeparam name="T29">The contract type #29.</typeparam>
            <typeparam name="T30">The contract type #30.</typeparam>
            <typeparam name="T31">The contract type #31.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``33(IoC.IMutableContainer)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <typeparam name="T27">The contract type #27.</typeparam>
            <typeparam name="T28">The contract type #28.</typeparam>
            <typeparam name="T29">The contract type #29.</typeparam>
            <typeparam name="T30">The contract type #30.</typeparam>
            <typeparam name="T31">The contract type #31.</typeparam>
            <typeparam name="T32">The contract type #32.</typeparam>
            <param name="container">The target container.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``33(IoC.IBinding)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <typeparam name="T27">The contract type #27.</typeparam>
            <typeparam name="T28">The contract type #28.</typeparam>
            <typeparam name="T29">The contract type #29.</typeparam>
            <typeparam name="T30">The contract type #30.</typeparam>
            <typeparam name="T31">The contract type #31.</typeparam>
            <typeparam name="T32">The contract type #32.</typeparam>
            <param name="binding">The target binding.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="M:IoC.FluentBind.Bind``33(IoC.IToken)">
            <summary>
            Binds multiple types.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="T1">The contract type #1.</typeparam>
            <typeparam name="T2">The contract type #2.</typeparam>
            <typeparam name="T3">The contract type #3.</typeparam>
            <typeparam name="T4">The contract type #4.</typeparam>
            <typeparam name="T5">The contract type #5.</typeparam>
            <typeparam name="T6">The contract type #6.</typeparam>
            <typeparam name="T7">The contract type #7.</typeparam>
            <typeparam name="T8">The contract type #8.</typeparam>
            <typeparam name="T9">The contract type #9.</typeparam>
            <typeparam name="T10">The contract type #10.</typeparam>
            <typeparam name="T11">The contract type #11.</typeparam>
            <typeparam name="T12">The contract type #12.</typeparam>
            <typeparam name="T13">The contract type #13.</typeparam>
            <typeparam name="T14">The contract type #14.</typeparam>
            <typeparam name="T15">The contract type #15.</typeparam>
            <typeparam name="T16">The contract type #16.</typeparam>
            <typeparam name="T17">The contract type #17.</typeparam>
            <typeparam name="T18">The contract type #18.</typeparam>
            <typeparam name="T19">The contract type #19.</typeparam>
            <typeparam name="T20">The contract type #20.</typeparam>
            <typeparam name="T21">The contract type #21.</typeparam>
            <typeparam name="T22">The contract type #22.</typeparam>
            <typeparam name="T23">The contract type #23.</typeparam>
            <typeparam name="T24">The contract type #24.</typeparam>
            <typeparam name="T25">The contract type #25.</typeparam>
            <typeparam name="T26">The contract type #26.</typeparam>
            <typeparam name="T27">The contract type #27.</typeparam>
            <typeparam name="T28">The contract type #28.</typeparam>
            <typeparam name="T29">The contract type #29.</typeparam>
            <typeparam name="T30">The contract type #30.</typeparam>
            <typeparam name="T31">The contract type #31.</typeparam>
            <typeparam name="T32">The contract type #32.</typeparam>
            <param name="token">The binding token.</param>
            <returns>The binding token.</returns>
        </member>
        <member name="T:IoC.FluentConfiguration">
            <summary>
            Represents extensions to configure a container.
            </summary>
        </member>
        <member name="M:IoC.FluentConfiguration.Create(System.Func{IoC.IContainer,IoC.IToken})">
            <summary>
            Creates configuration from factory.
            </summary>
            <param name="configurationFactory">The configuration factory.</param>
            <returns>The configuration instance.</returns>
        </member>
        <member name="M:IoC.FluentConfiguration.AsTokenOf(System.IDisposable,IoC.IMutableContainer)">
            <summary>
            Converts a disposable resource to the container's token.
            </summary>
            <param name="disposableToken">A disposable resource.</param>
            <param name="container">The target container.</param>
            <returns></returns>
        </member>
        <member name="M:IoC.FluentConfiguration.Apply(IoC.IMutableContainer,System.String[])">
            <summary>
            Applies text configurations for the target container.
            </summary>
            <param name="container">The target container.</param>
            <param name="configurationText">The text configurations.</param>
            <returns>The dependency token.</returns>
        </member>
        <member name="M:IoC.FluentConfiguration.Apply(IoC.IToken,System.String[])">
            <summary>
            Applies text configurations for the target container.
            </summary>
            <param name="token">The target container token.</param>
            <param name="configurationText">The text configurations.</param>
            <returns>The dependency token.</returns>
        </member>
        <member name="M:IoC.FluentConfiguration.Apply(IoC.IMutableContainer,System.IO.Stream[])">
            <summary>
            Applies text configurations from streams for the target container.
            </summary>
            <param name="container">The target container.</param>
            <param name="configurationStreams">The set of streams with text configurations.</param>
            <returns>The dependency token.</returns>
        </member>
        <member name="M:IoC.FluentConfiguration.Apply(IoC.IToken,System.IO.Stream[])">
            <summary>
            Applies text configurations from streams for the target container.
            </summary>
            <param name="token">The target container token.</param>
            <param name="configurationStreams">The set of streams with text configurations.</param>
            <returns>The dependency token.</returns>
        </member>
        <member name="M:IoC.FluentConfiguration.Apply(IoC.IMutableContainer,System.IO.TextReader[])">
            <summary>
            Applies text configurations from text readers for the target container.
            </summary>
            <param name="container">The target container.</param>
            <param name="configurationReaders">The set of text readers with text configurations.</param>
            <returns>The dependency token.</returns>
        </member>
        <member name="M:IoC.FluentConfiguration.Apply(IoC.IToken,System.IO.TextReader[])">
            <summary>
            Applies text configurations from text readers for the target container.
            </summary>
            <param name="token">The target container token.</param>
            <param name="configurationReaders">The set of text readers with text configurations.</param>
            <returns>The dependency token.</returns>
        </member>
        <member name="M:IoC.FluentConfiguration.Apply(IoC.IMutableContainer,System.Collections.Generic.IEnumerable{IoC.IConfiguration})">
            <summary>
            Applies configurations for the target container.
            </summary>
            <param name="container">The target container.</param>
            <param name="configurations">The configurations.</param>
            <returns>The dependency token.</returns>
        </member>
        <member name="M:IoC.FluentConfiguration.Apply(IoC.IToken,System.Collections.Generic.IEnumerable{IoC.IConfiguration})">
            <summary>
            Applies configurations for the target container.
            </summary>
            <param name="token">The target container token.</param>
            <param name="configurations">The configurations.</param>
            <returns>The dependency token.</returns>
        </member>
        <member name="M:IoC.FluentConfiguration.Apply(IoC.IMutableContainer,IoC.IConfiguration[])">
            <summary>
            Applies configurations for the target container.
            </summary>
            <param name="container">The target container.</param>
            <param name="configurations">The configurations.</param>
            <returns>The dependency token.</returns>
        </member>
        <member name="M:IoC.FluentConfiguration.Apply(IoC.IToken,IoC.IConfiguration[])">
            <summary>
            Applies configurations for the target container.
            </summary>
            <param name="token">The target container token.</param>
            <param name="configurations">The configurations.</param>
            <returns>The dependency token.</returns>
        </member>
        <member name="M:IoC.FluentConfiguration.Apply``1(IoC.IMutableContainer)">
            <summary>
            Applies a configuration for the target container.
            </summary>
            <typeparam name="T">The type of configuration.</typeparam>
            <param name="container">The target container.</param>
            <returns>The target container token.</returns>
        </member>
        <member name="M:IoC.FluentConfiguration.Apply``1(IoC.IToken)">
            <summary>
            Applies a configuration for the target container.
            </summary>
            <typeparam name="T">The type of configuration.</typeparam>
            <param name="token">The target container token.</param>
            <returns>The target container token.</returns>
        </member>
        <member name="M:IoC.FluentConfiguration.Using(IoC.IMutableContainer,IoC.IConfiguration[])">
            <summary>
            Applies configurations for the target container.
            </summary>
            <param name="container">The target container.</param>
            <param name="configurations">The configurations.</param>
            <returns>The target container.</returns>
        </member>
        <member name="M:IoC.FluentConfiguration.Using(IoC.IToken,IoC.IConfiguration[])">
            <summary>
            Applies configurations for the target container.
            </summary>
            <param name="token">The target container token.</param>
            <param name="configurations">The configurations.</param>
            <returns>The target container.</returns>
        </member>
        <member name="M:IoC.FluentConfiguration.Using``1(IoC.IMutableContainer)">
            <summary>
            Uses a configuration for the target container.
            </summary>
            <typeparam name="T">The type of configuration.</typeparam>
            <param name="container">The target container.</param>
            <returns>The target container.</returns>
        </member>
        <member name="M:IoC.FluentConfiguration.Using``1(IoC.IToken)">
            <summary>
            Uses a configuration for the target container.
            </summary>
            <typeparam name="T">The type of configuration.</typeparam>
            <param name="token">The target container token.</param>
            <returns>The target container.</returns>
        </member>
        <member name="T:IoC.FluentContainer">
            <summary>
            Extension methods for IoC containers and configurations.
            </summary>
        </member>
        <member name="M:IoC.FluentContainer.Create(IoC.IContainer,System.String)">
            <summary>
            Creates child container.
            </summary>
            <param name="parentContainer">The parent container.</param>
            <param name="name">The name of child container.</param>
            <returns>The child container.</returns>
        </member>
        <member name="M:IoC.FluentContainer.Create(IoC.IToken,System.String)">
            <summary>
            Creates child container.
            </summary>
            <param name="token">The parent container token.</param>
            <param name="name">The name of child container.</param>
            <returns>The child container.</returns>
        </member>
        <member name="M:IoC.FluentContainer.BuildUp``1(IoC.IConfiguration,System.Object[])">
            <summary>
            Buildups an instance which was not registered in container. Can be used as entry point of DI.
            </summary>
            <param name="configuration">The configurations.</param>
            <param name="args">The optional arguments.</param>
            <typeparam name="TInstance">The instance type.</typeparam>
            <returns>The disposable instance holder.</returns>
        </member>
        <member name="M:IoC.FluentContainer.BuildUp``1(IoC.IToken,System.Object[])">
            <summary>
            Buildups an instance.
            Registers the instance type in the container if it is required, resolves the instance and removes the registration from the container immediately if it was registered here.
            </summary>
            <typeparam name="TInstance">The instance type.</typeparam>
            <param name="token">The target container token.</param>
            <param name="args">The optional arguments.</param>
            <returns>The disposable instance holder.</returns>
        </member>
        <member name="M:IoC.FluentContainer.BuildUp``1(IoC.IMutableContainer,System.Object[])">
            <summary>
            Buildups an instance.
            Registers the instance type in the container if it is required, resolves the instance and removes the registration from the container immediately if it was registered here.
            </summary>
            <typeparam name="TInstance">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="args">The optional arguments.</param>
            <returns>The disposable instance holder.</returns>
        </member>
        <member name="T:IoC.FluentGetResolver">
            <summary>
            Represents extensions to get a resolver from the container.
            </summary>
        </member>
        <member name="M:IoC.FluentGetResolver.GetResolver``1(IoC.IContainer,System.Type,IoC.Tag)">
            <summary>
            Gets the resolver.
            </summary>
            <typeparam name="T">The resolver type.</typeparam>
            <param name="type">The target type.</param>
            <param name="tag">The tag of binding.</param>
            <param name="container">The target container.</param>
            <returns>The resolver.</returns>
        </member>
        <member name="M:IoC.FluentGetResolver.TryGetResolver``1(IoC.IContainer,System.Type,IoC.Tag,IoC.Resolver{``0}@)">
            <summary>
            Tries getting the resolver.
            </summary>
            <typeparam name="T">The resolver type.</typeparam>
            <param name="type">The target type.</param>
            <param name="tag">The tag of binding.</param>
            <param name="container"></param>
            <param name="resolver"></param>
            <returns>True if success.</returns>
        </member>
        <member name="M:IoC.FluentGetResolver.GetResolver``1(IoC.IContainer,IoC.Tag)">
            <summary>
            Gets the resolver.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="tag">The tag of binding.</param>
            <param name="container">The target container.</param>
            <returns>The resolver.</returns>
        </member>
        <member name="M:IoC.FluentGetResolver.TryGetResolver``1(IoC.IContainer,IoC.Tag,IoC.Resolver{``0}@)">
            <summary>
            Tries getting the resolver.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="tag">The tag of binding.</param>
            <param name="container">The target container.</param>
            <param name="resolver"></param>
            <returns>True if success.</returns>
        </member>
        <member name="M:IoC.FluentGetResolver.GetResolver``1(IoC.IContainer,System.Type)">
            <summary>
            Gets the resolver.
            </summary>
            <typeparam name="T">The resolver type.</typeparam>
            <param name="type">The target type.</param>
            <param name="container">The target container.</param>
            <returns>The resolver.</returns>
        </member>
        <member name="M:IoC.FluentGetResolver.TryGetResolver``1(IoC.IContainer,System.Type,IoC.Resolver{``0}@)">
            <summary>
            Tries getting the resolver.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="type">The target type.</param>
            <param name="container">The target container.</param>
            <param name="resolver"></param>
            <returns>True if success.</returns>
        </member>
        <member name="M:IoC.FluentGetResolver.GetResolver``1(IoC.IContainer)">
            <summary>
            Gets the resolver.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <returns>The resolver.</returns>
        </member>
        <member name="M:IoC.FluentGetResolver.TryGetResolver``1(IoC.IContainer,IoC.Resolver{``0}@)">
            <summary>
            Tries getting the resolver.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="resolver"></param>
            <returns>True if success.</returns>
        </member>
        <member name="M:IoC.FluentGetResolver.AsTag(System.Object)">
            <summary>
            Creates tag.
            </summary>
            <param name="tagValue">The tag value.</param>
            <returns>The tag.</returns>
        </member>
        <member name="T:IoC.FluentNativeGetResolver">
            <summary>
            Represents extensions to resolve from the native container.
            </summary>
        </member>
        <member name="M:IoC.FluentNativeGetResolver.GetResolver``1(IoC.Container)">
            <summary>
            Gets the resolver.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <returns>The resolver.</returns>
        </member>
        <member name="M:IoC.FluentNativeGetResolver.GetResolver``1(IoC.Container,IoC.Tag)">
            <summary>
            Gets the resolver.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="tag">The tag.</param>
            <returns>The resolver.</returns>
        </member>
        <member name="M:IoC.FluentNativeGetResolver.GetResolver``1(IoC.Container,System.Type)">
            <summary>
            Gets the resolver.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="type">The resolving instance type.</param>
            <returns>The resolver.</returns>
        </member>
        <member name="M:IoC.FluentNativeGetResolver.GetResolver``1(IoC.Container,System.Type,IoC.Tag)">
            <summary>
            Gets the resolver.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="type">The resolving instance type.</param>
            <param name="tag">The tag.</param>
            <returns>The resolver.</returns>
        </member>
        <member name="T:IoC.FluentNativeResolve">
            <summary>
            Represents extensions to resolve from the native container.
            </summary>
        </member>
        <member name="M:IoC.FluentNativeResolve.Resolve``1(IoC.Container)">
            <summary>
            Resolves an instance.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:IoC.FluentNativeResolve.Resolve``1(IoC.Container,IoC.Tag)">
            <summary>
            Resolves an instance.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="tag">The tag.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:IoC.FluentNativeResolve.Resolve``1(IoC.Container,System.Object[])">
            <summary>
            Resolves an instance.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="args">The optional arguments.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:IoC.FluentNativeResolve.Resolve``1(IoC.Container,IoC.Tag,System.Object[])">
            <summary>
            Resolves an instance.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="tag">The tag.</param>
            <param name="args">The optional arguments.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:IoC.FluentNativeResolve.Resolve``1(IoC.Container,System.Type)">
            <summary>
            Resolves an instance.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="type">The resolving instance type.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:IoC.FluentNativeResolve.Resolve``1(IoC.Container,System.Type,IoC.Tag)">
            <summary>
            Resolves an instance.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="type">The resolving instance type.</param>
            <param name="tag">The tag.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:IoC.FluentNativeResolve.Resolve``1(IoC.Container,System.Type,System.Object[])">
            <summary>
            Resolves an instance.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="type">The resolving instance type.</param>
            <param name="args">The optional arguments.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:IoC.FluentNativeResolve.Resolve``1(IoC.Container,System.Type,IoC.Tag,System.Object[])">
            <summary>
            Resolves an instance.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="type">The resolving instance type.</param>
            <param name="tag">The tag.</param>
            <param name="args">The optional arguments.</param>
            <returns>The instance.</returns>
        </member>
        <member name="T:IoC.FluentResolve">
            <summary>
            Represents extensions to resolve from the container.
            </summary>
        </member>
        <member name="M:IoC.FluentResolve.Resolve``1(IoC.IContainer)">
            <summary>
            Resolves an instance.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:IoC.FluentResolve.Resolve``1(IoC.IContainer,System.Object[])">
            <summary>
            Resolves an instance.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="args">The optional arguments.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:IoC.FluentResolve.Resolve``1(IoC.IContainer,IoC.Tag)">
            <summary>
            Resolves an instance.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="tag">The tag.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:IoC.FluentResolve.Resolve``1(IoC.IContainer,IoC.Tag,System.Object[])">
            <summary>
            Resolves an instance.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="tag">The tag.</param>
            <param name="args">The optional arguments.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:IoC.FluentResolve.Resolve``1(IoC.IContainer,System.Type)">
            <summary>
            Resolves an instance.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="type">The resolving instance type.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:IoC.FluentResolve.Resolve``1(IoC.IContainer,System.Type,System.Object[])">
            <summary>
            Resolves an instance.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="type">The resolving instance type.</param>
            <param name="args">The optional arguments.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:IoC.FluentResolve.Resolve``1(IoC.IContainer,System.Type,IoC.Tag)">
            <summary>
            Resolves an instance.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="type">The resolving instance type.</param>
            <param name="tag">The tag.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:IoC.FluentResolve.Resolve``1(IoC.IContainer,System.Type,IoC.Tag,System.Object[])">
            <summary>
            Resolves an instance.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The target container.</param>
            <param name="type">The resolving instance type.</param>
            <param name="tag">The tag.</param>
            <param name="args">The optional arguments.</param>
            <returns>The instance.</returns>
        </member>
        <member name="T:IoC.FluentScope">
            <summary>
            Represents extensions dealing with scopes.
            </summary>
        </member>
        <member name="M:IoC.FluentScope.CreateScope(IoC.IContainer)">
            <summary>
            Creates a new resolving scope. Can be used with <c>ScopeSingleton</c>.
            </summary>
            <param name="container">A container to resolve a scope.</param>
            <returns>Tne new scope instance.</returns>
        </member>
        <member name="T:IoC.FluentTrace">
            <summary>
            Represents extensions to trace the container.
            </summary>
        </member>
        <member name="M:IoC.FluentTrace.ToTraceSource(IoC.IContainer)">
            <summary>
            Gets a container trace source.
            </summary>
            <param name="container">The target container to trace.</param>
            <returns>The race source.</returns>
        </member>
        <member name="M:IoC.FluentTrace.Trace(IoC.IMutableContainer,System.Action{System.String})">
            <summary>
            Traces container actions through a handler.
            </summary>
            <param name="container">The target container to trace.</param>
            <param name="onTraceMessage">The trace handler.</param>
            <returns>The trace token.</returns>
        </member>
        <member name="M:IoC.FluentTrace.Trace(IoC.IToken,System.Action{System.String})">
            <summary>
            Traces container actions through a handler.
            </summary>
            <param name="token">The token of target container to trace.</param>
            <param name="onTraceMessage">The trace handler.</param>
            <returns>The trace token.</returns>
        </member>
        <member name="T:IoC.GenericTypeArgumentAttribute">
            <summary>
            Represents the generic type arguments marker.
            </summary>
        </member>
        <member name="T:IoC.TT">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TTDisposable">
            <summary>
            Represents the generic type arguments marker for <c>System.IDisposable</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparable">
            <summary>
            Represents the generic type arguments marker for <c>System.IComparable</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparable`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IComparable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEquatable`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IEquatable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEnumerable`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEnumerable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEnumerator`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEnumerator[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTCollection`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.ICollection[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTList`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IList[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTSet`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.ISet[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparer`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IComparer[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEqualityComparer`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEqualityComparer[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTDictionary`2">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IDictionary[TKey, TValue]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTObservable`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IObservable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTObserver`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IObserver[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TT1">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC1">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI1">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS1">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TTDisposable1">
            <summary>
            Represents the generic type arguments marker for <c>System.IDisposable</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparable1">
            <summary>
            Represents the generic type arguments marker for <c>System.IComparable</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparable1`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IComparable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEquatable1`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IEquatable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEnumerable1`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEnumerable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEnumerator1`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEnumerator[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTCollection1`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.ICollection[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTList1`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IList[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTSet1`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.ISet[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparer1`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IComparer[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEqualityComparer1`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEqualityComparer[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTDictionary1`2">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IDictionary[TKey, TValue]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTObservable1`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IObservable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTObserver1`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IObserver[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TT2">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC2">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI2">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS2">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TTDisposable2">
            <summary>
            Represents the generic type arguments marker for <c>System.IDisposable</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparable2">
            <summary>
            Represents the generic type arguments marker for <c>System.IComparable</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparable2`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IComparable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEquatable2`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IEquatable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEnumerable2`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEnumerable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEnumerator2`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEnumerator[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTCollection2`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.ICollection[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTList2`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IList[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTSet2`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.ISet[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparer2`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IComparer[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEqualityComparer2`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEqualityComparer[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTDictionary2`2">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IDictionary[TKey, TValue]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTObservable2`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IObservable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTObserver2`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IObserver[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TT3">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC3">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI3">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS3">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TTDisposable3">
            <summary>
            Represents the generic type arguments marker for <c>System.IDisposable</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparable3">
            <summary>
            Represents the generic type arguments marker for <c>System.IComparable</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparable3`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IComparable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEquatable3`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IEquatable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEnumerable3`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEnumerable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEnumerator3`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEnumerator[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTCollection3`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.ICollection[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTList3`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IList[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTSet3`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.ISet[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparer3`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IComparer[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEqualityComparer3`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEqualityComparer[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTDictionary3`2">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IDictionary[TKey, TValue]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTObservable3`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IObservable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTObserver3`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IObserver[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TT4">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC4">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI4">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS4">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TTDisposable4">
            <summary>
            Represents the generic type arguments marker for <c>System.IDisposable</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparable4">
            <summary>
            Represents the generic type arguments marker for <c>System.IComparable</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparable4`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IComparable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEquatable4`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IEquatable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEnumerable4`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEnumerable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEnumerator4`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEnumerator[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTCollection4`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.ICollection[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTList4`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IList[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTSet4`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.ISet[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparer4`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IComparer[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEqualityComparer4`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEqualityComparer[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTDictionary4`2">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IDictionary[TKey, TValue]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTObservable4`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IObservable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTObserver4`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IObserver[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TT5">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC5">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI5">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS5">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TTDisposable5">
            <summary>
            Represents the generic type arguments marker for <c>System.IDisposable</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparable5">
            <summary>
            Represents the generic type arguments marker for <c>System.IComparable</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparable5`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IComparable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEquatable5`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IEquatable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEnumerable5`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEnumerable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEnumerator5`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEnumerator[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTCollection5`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.ICollection[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTList5`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IList[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTSet5`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.ISet[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparer5`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IComparer[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEqualityComparer5`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEqualityComparer[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTDictionary5`2">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IDictionary[TKey, TValue]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTObservable5`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IObservable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTObserver5`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IObserver[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TT6">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC6">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI6">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS6">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TTDisposable6">
            <summary>
            Represents the generic type arguments marker for <c>System.IDisposable</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparable6">
            <summary>
            Represents the generic type arguments marker for <c>System.IComparable</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparable6`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IComparable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEquatable6`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IEquatable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEnumerable6`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEnumerable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEnumerator6`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEnumerator[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTCollection6`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.ICollection[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTList6`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IList[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTSet6`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.ISet[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparer6`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IComparer[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEqualityComparer6`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEqualityComparer[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTDictionary6`2">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IDictionary[TKey, TValue]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTObservable6`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IObservable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTObserver6`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IObserver[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TT7">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC7">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI7">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS7">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TTDisposable7">
            <summary>
            Represents the generic type arguments marker for <c>System.IDisposable</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparable7">
            <summary>
            Represents the generic type arguments marker for <c>System.IComparable</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparable7`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IComparable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEquatable7`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IEquatable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEnumerable7`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEnumerable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEnumerator7`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEnumerator[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTCollection7`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.ICollection[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTList7`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IList[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTSet7`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.ISet[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparer7`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IComparer[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEqualityComparer7`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEqualityComparer[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTDictionary7`2">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IDictionary[TKey, TValue]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTObservable7`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IObservable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTObserver7`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IObserver[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TT8">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC8">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI8">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS8">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TTDisposable8">
            <summary>
            Represents the generic type arguments marker for <c>System.IDisposable</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparable8">
            <summary>
            Represents the generic type arguments marker for <c>System.IComparable</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparable8`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IComparable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEquatable8`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IEquatable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEnumerable8`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEnumerable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEnumerator8`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEnumerator[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTCollection8`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.ICollection[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTList8`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IList[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTSet8`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.ISet[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTComparer8`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IComparer[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTEqualityComparer8`1">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IEqualityComparer[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTDictionary8`2">
            <summary>
            Represents the generic type arguments marker for <c>System.Collections.Generic.IDictionary[TKey, TValue]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTObservable8`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IObservable[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TTObserver8`1">
            <summary>
            Represents the generic type arguments marker for <c>System.IObserver[T]</c>.
            </summary>
        </member>
        <member name="T:IoC.TT9">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC9">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI9">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS9">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT10">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC10">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI10">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS10">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT11">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC11">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI11">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS11">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT12">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC12">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI12">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS12">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT13">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC13">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI13">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS13">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT14">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC14">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI14">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS14">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT15">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC15">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI15">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS15">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT16">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC16">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI16">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS16">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT17">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC17">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI17">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS17">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT18">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC18">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI18">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS18">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT19">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC19">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI19">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS19">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT20">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC20">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI20">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS20">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT21">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC21">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI21">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS21">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT22">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC22">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI22">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS22">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT23">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC23">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI23">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS23">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT24">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC24">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI24">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS24">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT25">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC25">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI25">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS25">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT26">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC26">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI26">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS26">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT27">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC27">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI27">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS27">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT28">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC28">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI28">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS28">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT29">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC29">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI29">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS29">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT30">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC30">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI30">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS30">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT31">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC31">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI31">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS31">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.TT32">
            <summary>
            Represents the generic type arguments marker for a reference type.
            </summary>
        </member>
        <member name="T:IoC.TTC32">
            <summary>
            Represents the generic type arguments marker for a reference type with defaul constructor.
            </summary>
        </member>
        <member name="T:IoC.TTI32">
            <summary>
            Represents the generic type arguments marker for an interface.
            </summary>
        </member>
        <member name="T:IoC.TTS32">
            <summary>
            Represents the generic type arguments marker for a value type.
            </summary>
        </member>
        <member name="T:IoC.IAutowiringStrategy">
            <summary>
            Represents an abstraction for autowiring strategy.
            </summary>
        </member>
        <member name="M:IoC.IAutowiringStrategy.TryResolveType(System.Type,System.Type,System.Type@)">
            <summary>
            Resolves type to create an instance.
            </summary>
            <param name="registeredType">Registered type.</param>
            <param name="resolvingType">Resolving type.</param>
            <param name="instanceType">The type to create an instance.</param>
            <returns>True if the type was resolved.</returns>
        </member>
        <member name="M:IoC.IAutowiringStrategy.TryResolveConstructor(System.Collections.Generic.IEnumerable{IoC.IMethod{System.Reflection.ConstructorInfo}},IoC.IMethod{System.Reflection.ConstructorInfo}@)">
            <summary>
            Resolves a constructor from a set of available constructors.
            </summary>
            <param name="constructors">The set of available constructors.</param>
            <param name="constructor">The resolved constructor.</param>
            <returns>True if the constructor was resolved.</returns>
        </member>
        <member name="M:IoC.IAutowiringStrategy.TryResolveInitializers(System.Collections.Generic.IEnumerable{IoC.IMethod{System.Reflection.MethodInfo}},System.Collections.Generic.IEnumerable{IoC.IMethod{System.Reflection.MethodInfo}}@)">
            <summary>
            Resolves initializing methods from a set of available methods/setters in the specific order which will be used to invoke them.
            </summary>
            <param name="methods">The set of available methods.</param>
            <param name="initializers">The set of initializing methods in the appropriate order.</param>
            <returns>True if initializing methods were resolved.</returns>
        </member>
        <member name="T:IoC.IBinding">
            <summary>
            The an abstract containers binding.
            </summary>
        </member>
        <member name="P:IoC.IBinding.Container">
            <summary>
            The target container to configure.
            </summary>
        </member>
        <member name="P:IoC.IBinding.Tokens">
            <summary>
            Binding tokens.
            </summary>
        </member>
        <member name="P:IoC.IBinding.Types">
            <summary>
            The contract type to bind.
            </summary>
        </member>
        <member name="P:IoC.IBinding.Tags">
            <summary>
            The tags to mark this binding.
            </summary>
        </member>
        <member name="P:IoC.IBinding.Lifetime">
            <summary>
            The lifetime instance or null by default.
            </summary>
        </member>
        <member name="P:IoC.IBinding.AutowiringStrategy">
            <summary>
            The autowiring strategy or null by default.
            </summary>
        </member>
        <member name="T:IoC.IBinding`1">
            <summary>
            The containers binding.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:IoC.IBuildContext">
            <summary>
            Represents an abstract build context.
            </summary>
        </member>
        <member name="P:IoC.IBuildContext.Parent">
            <summary>
            Provides a parent context or <c>null</c>.
            </summary>
        </member>
        <member name="P:IoC.IBuildContext.Key">
            <summary>
            The target key to build resolver.
            </summary>
        </member>
        <member name="P:IoC.IBuildContext.Container">
            <summary>
            The target container.
            </summary>
        </member>
        <member name="P:IoC.IBuildContext.Depth">
            <summary>
            The depth of current context in the build tree.
            </summary>
        </member>
        <member name="P:IoC.IBuildContext.AutowiringStrategy">
            <summary>
            The current autowiring strategy.
            </summary>
        </member>
        <member name="P:IoC.IBuildContext.ArgsParameter">
            <summary>
            The args parameters.
            </summary>
        </member>
        <member name="P:IoC.IBuildContext.ContainerParameter">
            <summary>
            The container parameter.
            </summary>
        </member>
        <member name="M:IoC.IBuildContext.CreateChild(IoC.Key,IoC.IContainer)">
            <summary>
            Creates a child context.
            </summary>
            <param name="key">The key</param>
            <param name="container">The container.</param>
            <returns>The new build context.</returns>
        </member>
        <member name="M:IoC.IBuildContext.CreateExpression(System.Linq.Expressions.Expression)">
            <summary>
            Create the expression.
            </summary>
            <param name="defaultExpression">The default expression.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:IoC.IBuildContext.MapType(System.Type,System.Type)">
            <summary>
            Adds types mapping.
            </summary>
            <param name="fromType">Type to map.</param>
            <param name="toType">The target type.</param>
        </member>
        <member name="M:IoC.IBuildContext.AddParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Adds a parameter.
            </summary>
            <param name="parameterExpression">The parameters expression to add.</param>
        </member>
        <member name="M:IoC.IBuildContext.FinalizeExpression(System.Linq.Expressions.Expression,IoC.ILifetime)">
            <summary>
            Finalizes an expression and adds a lifetime.
            </summary>
            <param name="baseExpression">The base expression.</param>
            <param name="lifetime">The target lifetime.</param>
            <returns></returns>
        </member>
        <member name="M:IoC.IBuildContext.TryCompile(System.Linq.Expressions.LambdaExpression,System.Delegate@,System.Exception@)">
            <summary>
            Compiles a lambda expression to delegate.
            </summary>
            <param name="lambdaExpression">The lambda expression to compile.</param>
            <param name="lambdaCompiled">The compiled lambda.</param>
            <param name="error">Compilation error.</param>
            <returns>True if success.</returns>
        </member>
        <member name="T:IoC.IBuilder">
            <summary>
            Represents an abstract builder for an instance.
            </summary>
        </member>
        <member name="M:IoC.IBuilder.Build(IoC.IBuildContext,System.Linq.Expressions.Expression)">
            <summary>
            Builds the expression based on a build context.
            </summary>
            <param name="context">Current build context.</param>
            <param name="bodyExpression">The expression body to build an instance resolver.</param>
            <returns>The new expression.</returns>
        </member>
        <member name="T:IoC.ICompiler">
            <summary>
            Represents an abstract expression compiler.
            </summary>
        </member>
        <member name="M:IoC.ICompiler.TryCompile(IoC.IBuildContext,System.Linq.Expressions.LambdaExpression,System.Delegate@,System.Exception@)">
            <summary>
            Compiles a lambda expression to delegate.
            </summary>
            <param name="context">Current context for building.</param>
            <param name="lambdaExpression">The lambda expression to compile.</param>
            <param name="lambdaCompiled">The compiled lambda.</param>
            <param name="error">Compilation error.</param>
            <returns>True if success.</returns>
        </member>
        <member name="T:IoC.ICompositionRoot`1">
            <summary>
            Represents an abstract composition root.
            </summary>
            <typeparam name="TInstance"></typeparam>
        </member>
        <member name="P:IoC.ICompositionRoot`1.Instance">
            <summary>
            The composition root instance.
            </summary>
        </member>
        <member name="T:IoC.IConfiguration">
            <summary>
            Represents an abstract containers configuration.
            </summary>
        </member>
        <member name="M:IoC.IConfiguration.Apply(IoC.IMutableContainer)">
            <summary>
            Applies a configuration to the target mutable container.
            </summary>
            <param name="container">The target mutable container to configure.</param>
            <returns>The enumeration of configuration tokens which allows to cancel that changes.</returns>
        </member>
        <member name="T:IoC.IContainer">
            <summary>
            Represents an abstract Inversion of Control container.
            </summary>
        </member>
        <member name="P:IoC.IContainer.Parent">
            <summary>
            Provides a parent container or <c>null</c> if it does not have a parent.
            </summary>
        </member>
        <member name="M:IoC.IContainer.TryGetDependency(IoC.Key,IoC.IDependency@,IoC.ILifetime@)">
            <summary>
            Provides a dependency and a lifetime for the registered key.
            </summary>
            <param name="key">The key to get a dependency.</param>
            <param name="dependency">The dependency.</param>
            <param name="lifetime">The lifetime.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:IoC.IContainer.TryGetResolver``1(System.Type,System.Object,IoC.Resolver{``0}@,System.Exception@,IoC.IContainer)">
            <summary>
            Provides a resolver for a specific type and tag or error if something goes wrong.
            </summary>
            <typeparam name="T">The type of instance producing by the resolver.</typeparam>
            <param name="type">The binding type.</param>
            <param name="tag">The binding tag or null if there is no tag.</param>
            <param name="resolver">The resolver to get an instance.</param>
            <param name="error">Error that occurs when resolving.</param>
            <param name="resolvingContainer">The resolving container and null if the resolving container is the current container.</param>
            <returns><c>True</c> if successful and a resolver was provided.</returns>
        </member>
        <member name="T:IoC.IDependency">
            <summary>
            Represents an abstract IoC dependency.
            </summary>
        </member>
        <member name="M:IoC.IDependency.TryBuildExpression(IoC.IBuildContext,IoC.ILifetime,System.Linq.Expressions.Expression@,System.Exception@)">
            <summary>
            Builds an expression for dependency based on the current build context and specified lifetime.
            </summary>
            <param name="buildContext">The build context.</param>
            <param name="lifetime">The target lifetime.</param>
            <param name="expression">The resulting expression for the current dependency.</param>
            <param name="error">The error if something goes wrong.</param>
            <returns><c>True</c> if successful and an expression was provided.</returns>
        </member>
        <member name="T:IoC.ILifetime">
            <summary>
            Represents an abstraction of container lifetime.
            </summary>
        </member>
        <member name="M:IoC.ILifetime.Create">
            <summary>
            Creates the similar lifetime to use with generic instances.
            </summary>
            <returns>The new lifetime instance.</returns>
        </member>
        <member name="M:IoC.ILifetime.SelectResolvingContainer(IoC.IContainer,IoC.IContainer)">
            <summary>
            Provides a container to resolve dependencies.
            </summary>
            <param name="registrationContainer">The container where a dependency was registered.</param>
            <param name="resolvingContainer">The container which is used to resolve an instance.</param>
            <returns>The selected container.</returns>
        </member>
        <member name="T:IoC.IMethod`1">
            <summary>
            Represents an abstraction for autowiring method.
            </summary>
            <typeparam name="TMethodInfo">The type of method info.</typeparam>
        </member>
        <member name="P:IoC.IMethod`1.Info">
            <summary>
            The methods information.
            </summary>
        </member>
        <member name="M:IoC.IMethod`1.GetParametersExpressions(IoC.IBuildContext)">
            <summary>
            Provides a set of parameters expressions.
            </summary>
            <returns>Parameters' expressions</returns>
        </member>
        <member name="M:IoC.IMethod`1.SetExpression(System.Int32,System.Linq.Expressions.Expression)">
            <summary>
            Specifies the expression of method parameter at the position.
            </summary>
            <param name="parameterPosition">The parameter position.</param>
            <param name="parameterExpression">The parameter expression.</param>
        </member>
        <member name="M:IoC.IMethod`1.SetDependency(System.Int32,System.Type,System.Object,System.Boolean,System.Object[])">
            <summary>
            Specifies the dependency type and tag for method parameter at the position.
            </summary>
            <param name="parameterPosition">The parameter position.</param>
            <param name="dependencyType">The dependency type.</param>
            <param name="dependencyTag">The optional dependency tag value.</param>
            <param name="isOptional"><c>True</c> if it is optional dependency.</param>
            <param name="args">The optional arguments.</param>
        </member>
        <member name="T:IoC.IMutableContainer">
            <summary>
            Represents an abstract of configurable Inversion of Control container.
            </summary>
        </member>
        <member name="M:IoC.IMutableContainer.TryRegisterDependency(System.Collections.Generic.IEnumerable{IoC.Key},IoC.IDependency,IoC.ILifetime,IoC.IToken@)">
            <summary>
            Registers the dependency and the lifetime for the specified dependency key.
            </summary>
            <param name="keys">The set of keys to register.</param>
            <param name="dependency">The dependency.</param>
            <param name="lifetime">The lifetime.</param>
            <param name="dependencyToken">The dependency token to unregister this dependency key.</param>
            <returns><c>True</c> if is registered successfully.</returns>
        </member>
        <member name="T:IoC.Injections">
            <summary>
            A set of injection markers.
            </summary>
        </member>
        <member name="M:IoC.Injections.Inject``1(IoC.IContainer)">
            <summary>
            Injects a dependency. Just the injection marker.
            </summary>
            <typeparam name="T">The type of dependency.</typeparam>
            <param name="container">The resolving container.</param>
            <returns>The injected instance.</returns>
        </member>
        <member name="M:IoC.Injections.TryInject``1(IoC.IContainer)">
            <summary>
            Try to inject a dependency. Just the injection marker.
            </summary>
            <typeparam name="T">The type of dependency.</typeparam>
            <param name="container">The resolving container.</param>
            <returns>The injected instance or <c>default(T)</c>.</returns>
        </member>
        <member name="M:IoC.Injections.TryInjectValue``1(IoC.IContainer)">
            <summary>
            Try to inject a value type dependency. Just the injection marker.
            </summary>
            <typeparam name="T">The type of dependency.</typeparam>
            <param name="container">The resolving container.</param>
            <returns>The injected instance or <c>default(T)</c>.</returns>
        </member>
        <member name="M:IoC.Injections.Inject``1(IoC.IContainer,System.Object,System.Object[])">
            <summary>
            Injects a dependency. Just the injection marker.
            </summary>
            <typeparam name="T">The type of dependency.</typeparam>
            <param name="container">The resolving container.</param>
            <param name="tag">The tag of dependency.</param>
            <param name="args">The optional arguments.</param>
            <returns>The injected instance.</returns>
        </member>
        <member name="M:IoC.Injections.TryInject``1(IoC.IContainer,System.Object,System.Object[])">
            <summary>
            Try to inject a dependency. Just the injection marker.
            </summary>
            <typeparam name="T">The type of dependency.</typeparam>
            <param name="container">The resolving container.</param>
            <param name="tag">The tag of dependency.</param>
            <param name="args">The optional arguments.</param>
            <returns>The injected instance or <c>default(T)</c>.</returns>
        </member>
        <member name="M:IoC.Injections.TryInjectValue``1(IoC.IContainer,System.Object,System.Object[])">
            <summary>
            Try to inject a value type dependency. Just the injection marker.
            </summary>
            <typeparam name="T">The type of dependency.</typeparam>
            <param name="container">The resolving container.</param>
            <param name="tag">The tag of dependency.</param>
            <param name="args">The optional arguments.</param>
            <returns>The injected instance or <c>default(T)</c>.</returns>
        </member>
        <member name="M:IoC.Injections.Assign``1(IoC.IContainer,``0,``0)">
            <summary>
            Injects a dependency. Just the injection marker.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container">The resolving container.</param>
            <param name="destination">The destination member for injection.</param>
            <param name="source">The source of injection.</param>
        </member>
        <member name="M:IoC.Injections.Inject(IoC.IContainer,System.Type)">
            <summary>
            Injects a dependency. Just the injection marker.
            </summary>
            <param name="container">The resolving container.</param>
            <param name="type">The type of dependency.</param>
            <returns>The injected instance.</returns>
        </member>
        <member name="M:IoC.Injections.TryInject(IoC.IContainer,System.Type)">
            <summary>
            Try to inject a dependency. Just the injection marker.
            </summary>
            <param name="container">The resolving container.</param>
            <param name="type">The type of dependency.</param>
            <returns>The injected instance or <c>default(T)</c>.</returns>
        </member>
        <member name="M:IoC.Injections.Inject(IoC.IContainer,System.Type,System.Object,System.Object[])">
            <summary>
            Injects a dependency. Just the injection marker.
            </summary>
            <param name="container">The resolving container.</param>
            <param name="type">The type of dependency.</param>
            <param name="tag">The tag of dependency.</param>
            <param name="args">The optional arguments.</param>
            <returns>The injected instance.</returns>
        </member>
        <member name="M:IoC.Injections.TryInject(IoC.IContainer,System.Type,System.Object,System.Object[])">
            <summary>
            Try to inject a dependency. Just the injection marker.
            </summary>
            <param name="container">The resolving container.</param>
            <param name="type">The type of dependency.</param>
            <param name="tag">The tag of dependency.</param>
            <param name="args">The optional arguments.</param>
            <returns>The injected instance or <c>default(T)</c>.</returns>
        </member>
        <member name="T:IoC.IResourceRegistry">
            <summary>
            Represents an abstraction of the resource registry.
            </summary>
        </member>
        <member name="M:IoC.IResourceRegistry.RegisterResource(System.IDisposable)">
            <summary>
            Registers a resource to the registry.
            </summary>
            <param name="resource">The target resource.</param>
        </member>
        <member name="M:IoC.IResourceRegistry.UnregisterResource(System.IDisposable)">
            <summary>
            Unregisters a resource from the registry.
            </summary>
            <param name="resource">The target resource.</param>
        </member>
        <member name="T:IoC.IScope">
            <summary>
            Represents an abstraction of a scope which is used with <c>Lifetime.ScopeSingleton</c>.
            </summary>
        </member>
        <member name="M:IoC.IScope.Activate">
            <summary>
            Activate the scope.
            </summary>
            <returns>The token to deactivate the activated scope.</returns>
        </member>
        <member name="T:IoC.Issues.DependencyDescription">
            <summary>
            Represents the dependency.
            </summary>
        </member>
        <member name="F:IoC.Issues.DependencyDescription.Dependency">
            <summary>
            The resolved dependency.
            </summary>
        </member>
        <member name="F:IoC.Issues.DependencyDescription.Lifetime">
            <summary>
            The lifetime to use.
            </summary>
        </member>
        <member name="M:IoC.Issues.DependencyDescription.#ctor(IoC.IDependency,IoC.ILifetime)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="dependency">The resolved dependency.</param>
            <param name="lifetime">The lifetime to use</param>
        </member>
        <member name="T:IoC.Issues.ICannotBuildExpression">
            <summary>
            Resolves the scenario when cannot build expression.
            </summary>
        </member>
        <member name="M:IoC.Issues.ICannotBuildExpression.Resolve(IoC.IBuildContext,IoC.IDependency,IoC.ILifetime,System.Exception)">
            <summary>
            Resolves the scenario when cannot build expression.
            </summary>
            <param name="buildContext">The build context.</param>
            <param name="dependency">The dependency.</param>
            <param name="lifetime">The lifetime.</param>
            <param name="error">The error.</param>
            <returns>The resulting expression.</returns>
        </member>
        <member name="T:IoC.Issues.ICannotGetResolver">
            <summary>
            Resolves the scenario when cannot get a resolver.
            </summary>
        </member>
        <member name="M:IoC.Issues.ICannotGetResolver.Resolve``1(IoC.IContainer,IoC.Key,System.Exception)">
            <summary>
            Resolves the scenario when cannot get a resolver.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="container">The resolving container.</param>
            <param name="key">The resolving key.</param>
            <param name="error">The error.</param>
            <returns>The resolver.</returns>
        </member>
        <member name="T:IoC.Issues.ICannotParseLifetime">
            <summary>
            Resolves the scenario when cannot parse a lifetime from a text.
            </summary>
        </member>
        <member name="M:IoC.Issues.ICannotParseLifetime.Resolve(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Resolves the scenario when cannot parse a lifetime from a text.
            </summary>
            <param name="statementText">The statement containing a lifetime metadata.</param>
            <param name="statementLineNumber">The line number in the source data.</param>
            <param name="statementPosition">The position at the line of the source data.</param>
            <param name="lifetimeName">The text with a lifetime metadata.</param>
            <returns></returns>
        </member>
        <member name="T:IoC.Issues.ICannotParseTag">
            <summary>
            Resolves the scenario when cannot parse a tag from a text.
            </summary>
        </member>
        <member name="M:IoC.Issues.ICannotParseTag.Resolve(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Resolves the scenario when cannot parse a tag from a text.
            </summary>
            <param name="statementText">The statement containing a tag metadata.</param>
            <param name="statementLineNumber">The line number in the source data.</param>
            <param name="statementPosition">The position at the line of the source data.</param>
            <param name="tag">The text with a tag metadata.</param>
            <returns></returns>
        </member>
        <member name="T:IoC.Issues.ICannotParseType">
            <summary>
            Resolves the scenario when cannot parse a type from a text.
            </summary>
        </member>
        <member name="M:IoC.Issues.ICannotParseType.Resolve(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Resolves the scenario when cannot parse a type from a text.
            </summary>
            <param name="statementText">The statement containing a type metadata.</param>
            <param name="statementLineNumber">The line number in the source data.</param>
            <param name="statementPosition">The position at the line of the source data.</param>
            <param name="typeName">The text with a type metadata.</param>
            <returns></returns>
        </member>
        <member name="T:IoC.Issues.ICannotRegister">
            <summary>
            Resolves the scenario when a new binding cannot be registered.
            </summary>
        </member>
        <member name="M:IoC.Issues.ICannotRegister.Resolve(IoC.IContainer,System.Collections.Generic.IEnumerable{IoC.Key},IoC.IDependency,IoC.ILifetime)">
            <summary>
            Resolves the scenario when a new binding cannot be registered.
            </summary>
            <param name="container">The target container.</param>
            <param name="keys">The set of binding keys.</param>
            <param name="dependency">The dependency.</param>
            <param name="lifetime">The target lifetime.</param>
            <returns>The dependency token.</returns>
        </member>
        <member name="T:IoC.Issues.ICannotResolveConstructor">
            <summary>
            Resolves the scenario when cannot resolve a constructor.
            </summary>
        </member>
        <member name="M:IoC.Issues.ICannotResolveConstructor.Resolve(IoC.IBuildContext,System.Collections.Generic.IEnumerable{IoC.IMethod{System.Reflection.ConstructorInfo}})">
            <summary>
            Resolves the scenario when cannot resolve a constructor.
            </summary>
            <param name="buildContext">The build context.</param>
            <param name="constructors">Available constructors.</param>
            <returns>The constructor.</returns>
        </member>
        <member name="T:IoC.Issues.ICannotResolveDependency">
            <summary>
            Resolves issue with unknown dependency.
            </summary>
        </member>
        <member name="M:IoC.Issues.ICannotResolveDependency.Resolve(IoC.IBuildContext)">
            <summary>
            Resolves the scenario when the dependency was not found.
            </summary>
            <param name="buildContext">The build context.</param>
            <returns>The pair of the dependency and of the lifetime.</returns>
        </member>
        <member name="T:IoC.Issues.ICannotResolveGenericTypeArgument">
            <summary>
            Resolves the scenario when cannot resolve the generic type argument of an instance type.
            </summary>
        </member>
        <member name="M:IoC.Issues.ICannotResolveGenericTypeArgument.Resolve(IoC.IBuildContext,System.Type,System.Int32,System.Type)">
            <summary>
            Resolves the generic type argument of an instance type.
            </summary>
            <param name="buildContext">The build context.</param>
            <param name="type">Registered type.</param>
            <param name="genericTypeArgPosition">The generic type argument position in the registered type.</param>
            <param name="genericTypeArg">The generic type argument in the registered type.</param>
            <returns>The resoled generic type argument.</returns>
        </member>
        <member name="T:IoC.Issues.ICannotResolveType">
            <summary>
            Resolves the scenario when cannot resolve the instance type.
            </summary>
        </member>
        <member name="M:IoC.Issues.ICannotResolveType.Resolve(IoC.IBuildContext,System.Type,System.Type)">
            <summary>
            Resolves the scenario when cannot resolve the instance type.
            </summary>
            <param name="buildContext">The build context.</param>
            <param name="registeredType">Registered type.</param>
            <param name="resolvingType">Resolving type.</param>
            <returns>The type to create an instance.</returns>
        </member>
        <member name="T:IoC.Issues.IFoundCyclicDependency">
            <summary>
            Resolves the scenario when a cyclic dependency was detected.
            </summary>
        </member>
        <member name="M:IoC.Issues.IFoundCyclicDependency.Resolve(IoC.IBuildContext)">
            <summary>
            Resolves the scenario when a cyclic dependency was detected.
            </summary>
            <param name="buildContext">The build context.</param>
        </member>
        <member name="T:IoC.IToken">
            <summary>
            Represents an abstraction of a binding token.
            </summary>
        </member>
        <member name="P:IoC.IToken.Container">
            <summary>
            The configurable container owning the registered binding.
            </summary>
        </member>
        <member name="T:IoC.Key">
            <summary>
            Represents a dependency key.
            </summary>
        </member>
        <member name="F:IoC.Key.AnyTag">
            <summary>
            The marker object for any tag.
            </summary>
        </member>
        <member name="F:IoC.Key.Type">
            <summary>
            The type.
            </summary>
        </member>
        <member name="F:IoC.Key.Tag">
            <summary>
            The tag.
            </summary>
        </member>
        <member name="M:IoC.Key.#ctor(System.Type,System.Object)">
            <summary>
            Creates the instance of Key.
            </summary>
            <param name="type"></param>
            <param name="tag"></param>
        </member>
        <member name="M:IoC.Key.ToString">
            <inheritdoc />
        </member>
        <member name="M:IoC.Key.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Key.Equals(IoC.Key)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Key.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:IoC.Lifetime">
            <summary>
            A set of well-known lifetimes.
            </summary>
        </member>
        <member name="F:IoC.Lifetime.Transient">
            <summary>
            For a new instance each time (default).
            </summary>
        </member>
        <member name="F:IoC.Lifetime.Singleton">
            <summary>
            For a singleton instance.
            </summary>
        </member>
        <member name="F:IoC.Lifetime.ContainerSingleton">
            <summary>
            For a singleton instance per container.
            </summary>
        </member>
        <member name="F:IoC.Lifetime.ScopeSingleton">
            <summary>
            For a singleton instance per scope.
            </summary>
        </member>
        <member name="T:IoC.Lifetimes.ContainerSingletonLifetime">
            <summary>
            For a singleton instance per container.
            </summary>
        </member>
        <member name="M:IoC.Lifetimes.ContainerSingletonLifetime.CreateKey(IoC.IContainer,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.ContainerSingletonLifetime.ToString">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.ContainerSingletonLifetime.Create">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.ContainerSingletonLifetime.OnNewInstanceCreated(System.Object,IoC.IContainer,IoC.IContainer,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.ContainerSingletonLifetime.OnInstanceReleased(System.Object,IoC.IContainer)">
            <inheritdoc />
        </member>
        <member name="T:IoC.Lifetimes.ContainerStateSingletonLifetime`1">
            <summary>
            For a singleton instance per state.
            </summary>
        </member>
        <member name="M:IoC.Lifetimes.ContainerStateSingletonLifetime`1.CreateKey(IoC.IContainer,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.ContainerStateSingletonLifetime`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.ContainerStateSingletonLifetime`1.Create">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.ContainerStateSingletonLifetime`1.OnNewInstanceCreated(`0,IoC.IContainer,IoC.IContainer,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.ContainerStateSingletonLifetime`1.OnInstanceReleased(`0,IoC.IContainer)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.ContainerStateSingletonLifetime`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:IoC.Lifetimes.KeyBasedLifetime`2">
            <summary>
            Represents the abstraction for singleton based lifetimes.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:IoC.Lifetimes.KeyBasedLifetime`2.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates an instance
            </summary>
            <param name="supportOnNewInstanceCreated">True to invoke OnNewInstanceCreated</param>
            <param name="supportOnInstanceReleased">True to invoke OnInstanceReleased</param>
            <param name="threadSafe"><c>True</c> to synchronize operations.</param>
        </member>
        <member name="M:IoC.Lifetimes.KeyBasedLifetime`2.Build(IoC.IBuildContext,System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.KeyBasedLifetime`2.SelectResolvingContainer(IoC.IContainer,IoC.IContainer)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.KeyBasedLifetime`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.KeyBasedLifetime`2.Create">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.KeyBasedLifetime`2.CreateKey(IoC.IContainer,System.Object[])">
            <summary>
            Creates key for singleton.
            </summary>
            <param name="container">The target container.</param>
            <param name="args">The arguments.</param>
            <returns>The created key.</returns>
        </member>
        <member name="M:IoC.Lifetimes.KeyBasedLifetime`2.OnNewInstanceCreated(`1,`0,IoC.IContainer,System.Object[])">
            <summary>
            Is invoked on the new instance creation.
            </summary>
            <param name="newInstance">The new instance.</param>
            <param name="key">The instance key.</param>
            <param name="container">The target container.</param>
            <param name="args">Optional arguments.</param>
            <returns>The created instance.</returns>
        </member>
        <member name="M:IoC.Lifetimes.KeyBasedLifetime`2.OnInstanceReleased(`1,`0)">
            <summary>
            Is invoked on the instance was released.
            </summary>
            <param name="releasedInstance">The released instance.</param>
            <param name="key">The instance key.</param>
        </member>
        <member name="M:IoC.Lifetimes.KeyBasedLifetime`2.Remove(`0)">
            <summary>
            Forcibly remove an instance.
            </summary>
            <param name="key">The instance key.</param>
        </member>
        <member name="T:IoC.Lifetimes.ScopeSingletonLifetime">
            <summary>
            For a singleton instance per scope.
            </summary>
        </member>
        <member name="M:IoC.Lifetimes.ScopeSingletonLifetime.CreateKey(IoC.IContainer,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.ScopeSingletonLifetime.ToString">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.ScopeSingletonLifetime.Create">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.ScopeSingletonLifetime.OnNewInstanceCreated(System.Object,IoC.IScope,IoC.IContainer,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.ScopeSingletonLifetime.OnInstanceReleased(System.Object,IoC.IScope)">
            <inheritdoc />
        </member>
        <member name="T:IoC.Lifetimes.SingletonLifetime">
            <summary>
            For a singleton instance.
            </summary>
        </member>
        <member name="M:IoC.Lifetimes.SingletonLifetime.#ctor(System.Boolean)">
            <summary>
            Creates an instance of lifetime.
            </summary>
            <param name="threadSafe"><c>True</c> to synchronize operations.</param>
        </member>
        <member name="M:IoC.Lifetimes.SingletonLifetime.Build(IoC.IBuildContext,System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.SingletonLifetime.SelectResolvingContainer(IoC.IContainer,IoC.IContainer)">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.SingletonLifetime.Dispose">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.SingletonLifetime.Create">
            <inheritdoc />
        </member>
        <member name="M:IoC.Lifetimes.SingletonLifetime.ToString">
            <inheritdoc />
        </member>
        <member name="T:IoC.Resolver`1">
            <summary>
            Represents an abstraction of instance resolver.
            </summary>
            <typeparam name="T">The type of resolving instance.</typeparam>
            <param name="container">The resolving container.</param>
            <param name="args">The optional resolving arguments.</param>
            <returns>The resolved instance.</returns>
        </member>
        <member name="T:IoC.Tag">
            <summary>
            Represents a tag holder.
            </summary>
        </member>
        <member name="M:IoC.Tag.ToString">
            <inheritdoc />
        </member>
        <member name="T:IoC.TraceEvent">
            <summary>
            Represents a container trace event.
            </summary>
        </member>
        <member name="F:IoC.TraceEvent.ContainerEvent">
            <summary>
            The original container event.
            </summary>
        </member>
        <member name="F:IoC.TraceEvent.Message">
            <summary>
            The trace message.
            </summary>
        </member>
        <member name="M:IoC.TraceEvent.#ctor(IoC.ContainerEvent,System.String)">
            <summary>
            Creates new instance of a trace event.
            </summary>
            <param name="containerEvent">The original container event.</param>
            <param name="message">The trace message.</param>
        </member>
    </members>
</doc>
