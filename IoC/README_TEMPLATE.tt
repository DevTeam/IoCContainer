<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".md" #>

<#
    var currentPath = this.Host.ResolvePath("");
    var solutionPath = Path.Combine(currentPath, "..");
    var scenariousPath = Path.Combine(Path.Combine(solutionPath, "IoC.Tests"), "UsageScenarios");

    var infos = new List<Dictionary<string, string>>();
    foreach(var file in Directory.GetFiles(scenariousPath, "*.cs"))
    {
        var isBody = false;
        var vars = new Dictionary<string, string>();
        var body = new StringBuilder();
        var bodyOffset = -1;
        foreach(var line in File.ReadAllLines(file))
        {
            if (vars.Count == 0)
            {
                vars["visible"] = "false";
                vars["tag"] = string.Empty;
                vars["priority"] = string.Empty;
                vars["description"] = string.Empty;
                vars["header"] = string.Empty;
                vars["footer"] = string.Empty;
                vars["file"] = file;
                vars["url"] = "https://raw.githubusercontent.com/DevTeam/IoCContainer/master/IoC.Tests/UsageScenarios/" + Path.GetFileName(file);
                infos.Add(vars);
            }

            var str = line.Trim();
            if (str == "// {")
            {
                isBody = true;
                bodyOffset = line.Length - line.TrimStart().Length;
                continue;
            }

            if (str == "// }")
            {
                isBody = false;
                continue;
            }

            if (str.StartsWith("// $"))
            {
                var parts = str.Substring(4, str.Length - 4).Split('=');
                if (parts.Length == 2)
                {
                    var key = parts[0];
                    if (key == "header" || key == "footer")
                    {
                        var curVar = vars[key];
                        if (curVar != String.Empty)
                        {
                            curVar += "\n";
                        }

                        vars[key] = curVar + parts[1];
                    }
                    else
                    {
                        vars[key] = parts[1];
                    }
                }

                continue;
            }

            if (isBody)
            {
                if (bodyOffset < line.Length)
                {
                    body.AppendLine(line.Substring(bodyOffset, line.Length - bodyOffset));
                }
                else
                {
                    body.AppendLine(line.TrimStart());
                }
            }
        }

        vars["body"] = body.ToString();
    }#>
## Usage Scenarios

<#
    foreach(var group in infos.Where(info => info["visible"] == "true").GroupBy(i => i["tag"]))
    {
        var groupName = group.Key;
        groupName = groupName.Replace("binding", "Flexible Binding");
        groupName = groupName.Replace("multithreading", "Multithreading-Ready");
        groupName = groupName.Replace("design", "Design Aspects");
        groupName = groupName.Replace("injection", "Powerful Injection");
        groupName = groupName.Replace("customization", "Fully Customizable");
        groupName = groupName.Replace("samples", "Other Samples");
    #>- <#=groupName#>
<#
        foreach(var info in group.OrderBy(i => i["priority"]))
        {
            var description = info["description"];
            var reference = "#" + description.Replace(" ", "-").Replace("'", string.Empty).ToLowerInvariant() + "-";
#>  - [<#=description#>](<#=reference#>)
<#
        }
    }
#>

<#
    foreach(var info in infos.OrderBy(i => i["tag"] + i["priority"]).Where(info => info["visible"] == "true"))
    {
#>### <#=info["description"]#> [![CSharp](https://img.shields.io/badge/C%23-code-blue.svg)](<#=info["url"]#>)

<#=info["header"]#>

``` CSharp
<#=info["body"]#>```

<#=info["footer"]#>

<#
    }

    var readmeHeaderFile = Path.Combine(solutionPath, "README_HEADER.md");
    var readmeFeaturesFile = Path.Combine(solutionPath, "README_FEATURES.md");
    var readmeBodyFile = Path.Combine(solutionPath, "README_BODY.md");
    var readmeFooterFile = Path.Combine(solutionPath, "README_FOOTER.md");
    var readmeFile = Path.Combine(solutionPath, "README.md");
    var samplesFile = Path.Combine(currentPath, "README_TEMPLATE.md");
    var nugetReadmeFile = Path.Combine(solutionPath, "README_NUGET.md");

    File.Copy(readmeHeaderFile, readmeFile, true);

    var featuresContent = File.ReadAllText(readmeFeaturesFile);
    File.AppendAllText(readmeFile, featuresContent);

    var bodyContent = File.ReadAllText(readmeBodyFile);
    File.AppendAllText(readmeFile, bodyContent);

    var samplesContent = File.ReadAllText(samplesFile);
    File.AppendAllText(readmeFile, samplesContent);

    var footerContent = File.ReadAllText(readmeFooterFile);
    File.AppendAllText(readmeFile, footerContent);

    var nugetContent = featuresContent.Replace("](#", "](https://github.com/DevTeam/IoCContainer#");
    File.WriteAllText(nugetReadmeFile, nugetContent);
#>
